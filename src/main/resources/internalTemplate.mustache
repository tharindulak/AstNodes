{{package}}
{{imports}}

public {{abstract}} class {{className}}{{type}} {{relationship}} {{parentClass}}{
{{#attributes}}public final {{type}} {{name}};
{{/attributes}}

public {{className}}(SyntaxKind kind {{#attributes}}, {{type}} {{name}}{{/attributes}}){
super(kind {{immediateParent}});
{{#attributes}}this.{{name}} = {{name}};
{{/attributes}}
{{#bucket}}this.bucketCount = {{bucketCount}};
this.childBuckets = new SyntaxNode[{{bucketCount}}];
{{/bucket}}
{{#addChildNode}}this.addChildNode({{name}}, {{index}});
{{/addChildNode}}
}

public {{className}}(SyntaxKind kind, int width {{#attributes}}, {{type}} {{name}}{{/attributes}}) {
super(kind, width {{immediateParent}});
{{#attributes}}this.{{name}} = {{name}};
{{/attributes}}
{{#bucket}}this.bucketCount = {{bucketCount}};
this.childBuckets = new SyntaxNode[{{bucketCount}}];
{{/bucket}}
{{#addChildNode}}this.addChildNode({{name}}, {{index}});
{{/addChildNode}}
}

{{#toStringFunction}}public String toString() {
return leadingTrivia + {{kind}} + trailingTrivia;
}
{{/toStringFunction}}

{{#facadeFunction}}public BLNode createFacade(int position, BLNonTerminalNode parent) {
return new BL{{facadeClass}}(this, position, parent);
}
{{/facadeFunction}}
}
